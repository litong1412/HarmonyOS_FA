/*
    Copyright 2021. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

interface Result<T> {
    status: string;
    resultCode: number;
    data: T;
}
interface AuthHuaweiId {
    /** Home Zone.*/
    homeZone: number,
    /** Access token.*/
    accessToken: string,
    /** ID token from a HUAWEI ID if the authorization parameter specified by ID_TOKEN is carried during authorization. */
    idToken: string,
    /** Profile picture URI.*/
    photoUriString: string,
    /** Authorized scopes.*/
    grantedScopes: ScopeUri[],
    /** Expiration time in seconds.*/
    expirationTimeSecs: number,
    /** Nickname. */
    displayName: string,
    /** Family name. */
    familyName: string,
    /** Gender*/
    gender: number,
    /** Given name from a HUAWEI ID if the authorization parameter specified during authorization. Otherwise, value null is returned.*/
    givenName: string,
    /** The value differs for the same user in different apps. */
    openId: string,
    /** UnionId from a HUAWEI ID if the authorization parameter specified during authorization. */
    unionId: string,
    /** Extended scopes.*/
    extensionScope: string[],
    /** Status*/
    status: number,
}

interface ScopeUri {
    /**Scope Uri */
    mScopeUri: string
}

interface Status {
    /** Status Code*/
    statusCode: number
}

interface AccountIcon {
    /**  icon resources.*/
    icon: string,
    /** icon description.*/
    description: string
}

declare class HMSAccount {

    /**
     * This API is called for HUAWEI sign-in
     * @param {permissions} Permission[]  Requested permission options.
     * @param {scopes} Scope[] Authorized scopes.
     * @return {Promise<Result<AuthHuaweiId>>} If the operation is successful, promise resolves to an AuthHuaweiId object. Otherwise, it throws an error.
     */
    public static signIn(permissions: string[], scopes: string[]): Promise<Result<AuthHuaweiId>>;

    /**
     * This API is called for HUAWEI sign-in
     * @param {permissions} Permission[]  Requested permission options.
     * @param {scopes} Scope[] Authorized scopes.
     * @return {Promise<Result<AuthHuaweiId>>} If the operation is successful, promise resolves to an AuthHuaweiId object. Otherwise, it throws an error.
     */
    public static silentSignIn(permissions: string[], scopes: string[]): Promise<Result<AuthHuaweiId>>;

    /**
     * This API is called to cancel sign-in authorization.
     * @return {Promise<Result<Status>>}
     */
    public static cancelAuthorization(): Promise<Result<Status>>;

    /**
     * This API is called to sign out of an app from a HUAWEI ID.
     * @return {Promise<Result<Status>>}
     */
    public static signOut(): Promise<Result<Status>>;

    /**
    * This API is called to check whether the designated HUAWEI ID has been assigned all permissions specified by scopeList.
    * @param {huaweiId} AuthHuaweiId Signed-in HUAWEI ID information, including the ID, nickname, profile picture URI, permission, and access token.
    * @param {scope} Scope Authorized scopes
    * @return {Promise<Result<boolean>>}
    */
    public static containScopes(huaweiId: AuthHuaweiId, scope: string[]): Promise<Result<boolean>>;

    /**
    * This API is called to request the permission specified by scopeList from a HUAWEI ID.
    * @param {Scope} Scope Authorized scopes
    * @return {Promise<Result<boolean>>}
    */
    public static addAuthScope(scope: string[]): Promise<Result<boolean>>;

    /**
    * This API is called to obtain information about the HUAWEI ID used for previous sign-in and authorization.
    * @return {Promise<Result<AuthHuaweiId>>} If the operation is successful, promise resolves to an AuthHuaweiId object. Otherwise, it throws an error.
    */
    public static getAuthResult(): Promise<Result<AuthHuaweiId>>;

    /**
    * This API is called to obtain the AuthHuaweiId.
    * @param {Scope} scope Authorized scopes 
    * @return {Promise<Result<AuthHuaweiId>>} If the operation is successful, promise resolves to an AuthHuaweiId object. Otherwise, it throws an error.
    */
    public static getAuthResultWithScopes(scope: string[]): Promise<Result<AuthHuaweiId>>;

    /**
    * This API is called to obtains icon information.
    * 
    * @return {Promise<Result<AccountIcon>>} If the operation is successful, promise resolves to an AccountIcon object. Otherwise, it throws an error.
    */
    public static getChannel(): Promise<Result<AccountIcon>>;

}

declare namespace HMSAccount {
    enum Scope {
        /** Obtains the OpenID of a user.*/
        OPENID = "openid",
        /** Obtains the profile picture, actual name, and nickname of a user.*/
        BASEPROFILE = "https://www.huawei.com/auth/account/base.profile",
        /** Obtains the email address of a user.*/
        EMAIL = "email",
        /** Obtains the mobile number of a user.*/
        MOBILE_NUMBER = "https://www.huawei.com/auth/account/mobile.number",
        /** Obtain the country or region where a HUAWEI ID is registered and the country or region where the user is currently located.*/
        ACCOUNT_COUNTRY = "https://www.huawei.com/auth/account/country",
        /** Obtains the birthdate of a user.*/
        ACCOUNT_BIRTHDAY = "https://www.huawei.com/auth/account/birthday",
        /** Obtains the age range of a user.*/
        AGE_RANGE = "https://www.huawei.com/auth/account/age.range"
    }

    enum Permission {
        /** Obtains idtoken.*/
        IDTOKEN = "idtoken",
        /** Obtains accesstoken*/
        ACCESSTOKEN = "https://www.huawei.com/auth/account/base.profile/accesstoken"
    }
}

export default HMSAccount;
